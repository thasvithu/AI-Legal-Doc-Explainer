from __future__ import annotations
from io import BytesIO
from reportlab.lib.pagesizes import LETTER
from reportlab.pdfgen import canvas
from typing import List, Dict
from src.utils.types import ClauseResult, RedFlagResult, Document
from src.utils.config import AppConfig


def build_report(docs: List[Document], summaries, clauses: List[ClauseResult], redflags: List[RedFlagResult], qa_history, config: AppConfig) -> bytes:
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=LETTER)
    width, height = LETTER
    def write_line(text: str, y: int) -> int:
        c.drawString(40, y, text[:120])
        return y - 14

    y = height - 50
    c.setFont("Helvetica-Bold", 16)
    c.drawString(40, y, "AI Legal Doc Explainer Report")
    y -= 30
    c.setFont("Helvetica", 10)
    y = write_line("Not legal advice. Generated by AI; verify with a qualified attorney.", y)
    y -= 10
    c.setFont("Helvetica-Bold", 12)
    y = write_line("Documents", y)
    c.setFont("Helvetica", 10)
    for d in docs:
        y = write_line(f"{d.name} ({d.pages} pages)", y)
        if y < 60:
            c.showPage(); y = height - 50
    for name, data in summaries.items():
        c.setFont("Helvetica-Bold", 12); y = write_line(f"Summary: {name}", y); c.setFont("Helvetica", 10)
        for line in data["bullets"].splitlines():
            y = write_line(line, y)
            if y < 60:
                c.showPage(); y = height - 50
    c.setFont("Helvetica-Bold", 12); y = write_line("Key Clauses", y); c.setFont("Helvetica", 10)
    for cl in clauses:
        y = write_line(f"[{cl.page}] {cl.clause_type} ({cl.importance}) - {cl.explanation}", y)
        if y < 60:
            c.showPage(); y = height - 50
    c.setFont("Helvetica-Bold", 12); y = write_line("Red Flags", y); c.setFont("Helvetica", 10)
    for rf in redflags:
        y = write_line(f"[{rf.page}] {rf.risk_type} (Score {rf.confidence}) - {rf.reason}", y)
        if y < 60:
            c.showPage(); y = height - 50
    c.setFont("Helvetica-Bold", 12); y = write_line("Q&A", y); c.setFont("Helvetica", 10)
    for qa in qa_history:
        y = write_line(f"Q: {qa['q']}", y)
        y = write_line(f"A: {qa['a'][:100]}", y)
        for cit in qa['citations']:
            y = write_line(f"  Pg {cit['page']}: {cit['snippet'][:60]}", y)
            if y < 60:
                c.showPage(); y = height - 50
        if y < 60:
            c.showPage(); y = height - 50
    c.showPage()
    c.save()
    pdf = buffer.getvalue()
    buffer.close()
    return pdf
